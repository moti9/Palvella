# Generated by Django 5.0.2 on 2024-02-29 14:08

import django.core.validators
import django.db.models.deletion
import merchants.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Allergen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='Cuisine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Cuisine',
                'verbose_name_plural': 'Cuisines',
            },
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('quantity', models.CharField(max_length=50)),
                ('unit', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='PostalCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('postal_code', models.CharField(default='', max_length=6)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=100)),
                ('product_code', models.CharField(blank=True, default='', max_length=25, null=True)),
                ('description', models.TextField(default='')),
                ('meta_data', models.TextField(blank=True, default='', null=True)),
                ('is_available', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProductVariation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=10, null=True)),
                ('size_unit', models.CharField(choices=[('ml', 'Milliliter'), ('kg', 'Kilogram'), ('large', 'Large'), ('medium', 'Medium'), ('small', 'Small'), ('half', 'Half'), ('other', 'Other')], default='ml', max_length=20)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(default='INR', max_length=3)),
            ],
            options={
                'verbose_name': 'Product variation',
                'verbose_name_plural': 'Product variations',
            },
        ),
        migrations.CreateModel(
            name='Business',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=255)),
                ('category', models.CharField(choices=[('shop', 'Shop'), ('restaurant', 'Restaurant')], default='shop', max_length=50)),
                ('contact_number', models.CharField(default='', max_length=15)),
                ('email', models.EmailField(default='', max_length=100)),
                ('description', models.TimeField(default='', max_length=1000)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('service_available_at', models.ManyToManyField(to='merchants.postalcode')),
            ],
        ),
        migrations.CreateModel(
            name='BusinessAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address_line1', models.CharField(default='', max_length=255)),
                ('address_line2', models.CharField(blank=True, default='', max_length=255, null=True)),
                ('city', models.CharField(default='', max_length=50)),
                ('state', models.CharField(default='', max_length=50)),
                ('postal_code', models.CharField(default='', max_length=20)),
                ('country', models.CharField(default='', max_length=50)),
                ('business', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='merchants.business')),
                ('owner', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BusinessDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document', models.FileField(upload_to='business_documents/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'doc', 'docx']), django.core.validators.MaxValueValidator(2097152)])),
                ('business', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='merchants.business')),
                ('owner', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BusinessImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='business_images/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png']), django.core.validators.MaxValueValidator(1048576), merchants.models.validate_image_dimensions])),
                ('business', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='merchants.business')),
                ('owner', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OwnerDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document', models.FileField(upload_to='owner_documents/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'doc', 'docx']), django.core.validators.MaxValueValidator(2097152)])),
                ('owner', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ShopProduct',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='merchants.product')),
                ('brand', models.CharField(default='', max_length=100)),
            ],
            options={
                'verbose_name': 'Shop Product',
                'verbose_name_plural': 'Shop Products',
            },
            bases=('merchants.product',),
        ),
        migrations.AddField(
            model_name='product',
            name='business',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='merchants.business'),
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='product_images/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png']), django.core.validators.MaxValueValidator(2097152), merchants.models.validate_image_dimensions])),
                ('product', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='merchants.product')),
            ],
        ),
        migrations.AddField(
            model_name='product',
            name='product_variant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='merchants.productvariation'),
        ),
        migrations.CreateModel(
            name='BusinessReview',
            fields=[
                ('review_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='merchants.review')),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='merchants.business')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            bases=('merchants.review',),
        ),
        migrations.CreateModel(
            name='ProductReview',
            fields=[
                ('review_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='merchants.review')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='merchants.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Product Review',
                'verbose_name_plural': 'Product Reviews',
            },
            bases=('merchants.review',),
        ),
        migrations.CreateModel(
            name='RestaurantProduct',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='merchants.product')),
                ('preparation_time', models.CharField(blank=True, default='', max_length=50, null=True)),
                ('available_from', models.TimeField(blank=True, null=True)),
                ('available_until', models.TimeField(blank=True, null=True)),
                ('allergens', models.ManyToManyField(to='merchants.allergen')),
                ('cuisines', models.ManyToManyField(to='merchants.cuisine')),
                ('ingredients', models.ManyToManyField(to='merchants.ingredient')),
            ],
            options={
                'verbose_name': 'Restaurant Product',
                'verbose_name_plural': 'Restaurant Products',
            },
            bases=('merchants.product',),
        ),
    ]
